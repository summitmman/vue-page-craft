{
    "id": "sample-page",
    "data": {
        "state": {
            "name": "Sumit",
            "surname": "Man",
            "benefits": [
                {
                    "title": "Get Rewards",
                    "subtitle": "Get rewards for every commit that you make",
                    "icon": "/vue-page-craft/img/diamond.png"
                },
                {
                    "title": "Get Knowledge",
                    "subtitle": "Professionals will peer review your code and help you learn",
                    "icon": "/vue-page-craft/img/deep-learning.png"
                },
                {
                    "title": "Build AI",
                    "subtitle": "Finally build AI bots which will help rule the world",
                    "icon": "/vue-page-craft/img/robotics.png"
                }
            ]
        },
        "extra": {
            "sample": "data"
        },
        "store": {
            "userId": "12341234"
        }
    },
    "schema": [
        {
            "type": "h1",
            "children": [
                "Page Crafter Demo"
            ]
        },
        {
            "type": "p",
            "props": {
                "class": "mb-10"
            },
            "children": [
                "This page is made using JSON schema and Page crafter. You can create entire pages with mid-level reactivity at run-time. Below are some supported features."
            ]
        },
        {
            "type": "p",
            "props": {
                "class": "mb-10 note-block"
            },
            "children": [
                {
                    "type": "b",
                    "children": [
                        "Note:"
                    ]
                },
                " On the right, you see the schema which created this page along with the initial state. These can be provided in JSON format. Event and component map are to be provided in the code before hand."
            ]
        },
        {
            "type": "div",
            "props": {
                "class": "mb-10"
            },
            "children": [
                {
                    "type": "h2",
                    "children": [
                        "Bind state and events"
                    ]
                },
                {
                    "type": "div",
                    "props": {
                        "class": "mb-10"
                    },
                    "children": [
                        {
                            "type": "label",
                            "props": {
                                "class": "block"
                            },
                            "children": [
                                "Change the name below"
                            ]
                        },
                        {
                            "type": "input",
                            "props": {
                                "type": "text",
                                "class": "native-input",
                                "value": "{{ name }}"
                            },
                            "events": {
                                "input": "{{ handleNameChange }}"
                            }
                        },
                        {
                            "type": "div",
                            "children": [
                                "You have entered: {{ name }}"
                            ]
                        }
                    ]
                },
                {
                    "type": "div",
                    "props": {
                        "class": "note-block"
                    },
                    "children": [
                        {
                            "type": "p",
                            "props": {
                                "class": "mb-10"
                            },
                            "children": [
                                "Here we are creating a simple input element, binding the state ",
                                {
                                    "type": "b",
                                    "children": [
                                        "'name'"
                                    ]
                                },
                                " and the event ",
                                {
                                    "type": "b",
                                    "children": [
                                        "'handleNameChange'"
                                    ]
                                },
                                " to the input event. You can see both of these in the state and event map."
                            ]
                        },
                        {
                            "type": "p",
                            "children": [
                                "The label under the input uses ",
                                {
                                    "type": "b",
                                    "children": [
                                        "string interpolation"
                                    ]
                                },
                                " to show the reactive state as it changes."
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "div",
            "props": {
                "class": "mb-10"
            },
            "children": [
                {
                    "type": "h2",
                    "children": [
                        "Use Expressions in string interpolation"
                    ]
                },
                {
                    "type": "div",
                    "props": {
                        "class": "mb-10"
                    },
                    "children": [
                        "The name you entered in the previous section has:",
                        {
                            "type": "div",
                            "children": [
                                "characters: ",
                                {
                                    "type": "b",
                                    "children": ["{{ name.length }}"]
                                }
                            ]
                        },
                        {
                            "type": "div",
                            "children": [
                                "middle index: ",
                                {
                                    "type": "b",
                                    "children": ["{{ Math.floor(name.length/2) }}"]
                                }
                            ]
                        },
                        {
                            "type": "div",
                            "children": [
                                "middle character: ",
                                {
                                    "type": "b",
                                    "children": ["\"{{ name[Math.floor(name.length/2)] }}\""]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "div",
                    "props": {
                        "class": "note-block"
                    },
                    "children": [
                        "You can use expressions in string interpolation. In the above example we are using expressions like ", {"type": "b", "children": "name[Math.floor(name.length/2)]"}, ", which has math operation \"division\", function \"Math.floor\" and we are also accessing the \"length\" property of state \"name\". You will see these being reactive and change as you change the text in the input above."
                    ]
                }
            ]
        },
        {
            "type": "div",
            "props": {
                "class": "mb-10"
            },
            "children": [
                {
                    "type": "h2",
                    "children": [
                        "Use native html elements or custom vue components"
                    ]
                },
                {
                    "type": "div",
                    "children": [
                        {
                            "type": "button",
                            "props": {
                                "class": "native-btn mr-5"
                            },
                            "events": {
                                "click": "{{ handleAppCustomClick }}"
                            },
                            "children": ["Native button"]
                        },
                        {
                            "type": "Button",
                            "events": {
                                "click": "{{ handleAppCustomClick }}"
                            },
                            "children": ["Custom button component"]
                        },
                        {
                            "type": "div",
                            "props": {
                                "class": "note-block mt-10"
                            },
                            "children": [
                                "You can render native html elements or custom vue components. You will see custom vue components in the component map, or it should be globally available.",
                                {
                                    "type": "p",
                                    "props": {
                                        "class": "mt-10"
                                    },
                                    "children": [
                                        {
                                            "type": "b",
                                            "children": ["Note:"]
                                        },
                                        " You may also add components from any component library in the same way"
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "div",
            "props": {
                "class": "mb-10"
            },
            "children": [
                {
                    "type": "h2",
                    "children": [
                        "Use v-model and named slots"
                    ]
                },
                {
                    "type": "div",
                    "children": [
                        {
                            "type": "Name",
                            "props": {
                                "type": "text",
                                "v-model": "{{ name }}",
                                "v-model:surname": "{{ surname }}",
                                "singleName": "{{ singleName }}"
                            },
                            "events": {
                                "change": "handleChange"
                            },
                            "slots": {
                                "footer": [
                                    "Your full name is '{{ footerSlotProps.fullName }}'"
                                ]
                            }
                        }
                    ]
                },
                {
                    "type": "div",
                    "props": {
                        "class": "note-block mt-10"
                    },
                    "children": [
                        {
                            "type": "p",
                            "props": {
                                "class": "mb-10"
                            },
                            "children": [
                                "The complete bordered section above is a custom component to which we can ", {"type": "b", "children": ["v-model"]}, " and named ", {"type": "b", "children": ["v-model:surname"]}, ". So multiple v-models are supported."
                            ]
                        },
                        {
                            "type": "p",
                            "children": [
                                "We are also providing ", {"type": "b", "children": ["named slot"]}, " \"footer\" in the above component and that slot receives reactive ", {"type": "b", "children": ["slotProps"]}, " (fullName) here in the format \"slotName + 'SlotProps'\" (eg: footerSlotProps.fullName)."
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "div",
            "children": [
                {
                    "type": "h2",
                    "children": [
                        "Use v-if"
                    ]
                },
                {
                    "type": "v-if",
                    "props": {
                        "condition": "{{ name }}",
                        "vElseChildren": [
                            {
                                "type": "v-if",
                                "props": {
                                    "condition": "{{ surname }}",
                                    "vElseChildren": [
                                        "You have not entered any name"
                                    ]
                                },
                                "children": [
                                    "First name does not exist but surname does '{{ surname }}'"
                                ]
                            }
                        ]
                    },
                    "children": [
                        "First name exists '{{ name }}'"
                    ]
                },
                {
                    "type": "div",
                    "props": {
                        "class": "note-block mt-10"
                    },
                    "children": [
                        {
                            "type": "p",
                            "props": { "class": "mb-10" },
                            "children": [
                                "Here we first check if first 'name' exists, if it does not then we check if 'surname' exists and if both don't, then we print that no name exists"
                            ]
                        },
                        {
                            "type": "p",
                            "children": [
                                "So, in the above section, first delete first name, then the surname and observe how statements change above"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "div",
            "children": [
                {
                    "type": "h2",
                    "children": [
                        "Use v-for"
                    ]
                },
                {
                    "type": "ul",
                    "props": {
                        "class": "native-ul"
                    },
                    "children": [
                        {
                            "type": "v-for",
                            "props": {
                                "id": "myBenefits",
                                "loopOn": "{{ benefits }}"
                            },
                            "children": [
                                {
                                    "type": "li",
                                    "children": [
                                        {
                                            "type": "div",
                                            "props": {
                                                "class": "flex"
                                            },
                                            "children": [
                                                {
                                                    "type": "div",
                                                    "children": [
                                                        {
                                                            "type": "img",
                                                            "props": {
                                                                "src": "{{ myBenefitsItem.icon }}",
                                                                "class": "native-avatar"
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "div",
                                                    "children": [
                                                        {
                                                            "type": "h4",
                                                            "children": [
                                                                "{{ name }} Would {{ myBenefitsItem.title }}"
                                                            ]
                                                        },
                                                        {
                                                            "type": "div",
                                                            "children": [
                                                                "{{ myBenefitsItem.subtitle }}"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "div",
                    "props": {
                        "class": "note-block mt-10 mb-10"
                    },
                    "children": [
                        {
                            "type": "p",
                            "props": {
                                "class": "mb-10"
                            },
                            "children": [
                                "The above structure has been made with v-for. You can access the item in each loop in the format \"id+'item'\" (eg: myBenefitsItem)."
                            ]
                        },
                        {
                            "type": "p",
                            "children": [
                                {
                                    "type": "b",
                                    "children": ["Note:"]
                                },
                                " I added 'name' to the items just to show reactivity"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}